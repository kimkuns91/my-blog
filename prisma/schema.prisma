generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  email           String      @unique
  name            String 
  profileImg      String      @default("/images/noUser.webp")
  password        String
  role            Role        @default(USER)
  provider        String      @default("credentials")
  createdAt       DateTime    @default(now())
  emailVerified   DateTime?   @map("verifiedAt")
  sessions        Session[]
  posts           Post[]
  likes           Like[]
  comments        Comment[]
  aichatrooms     AiChatRoom[]
  @@map("users")
}

model Session {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken    String      @unique
  userId          String      @db.ObjectId
  expires         DateTime    @map("expiresAt")
  user            User        @relation(fields: [userId], references: [id])
  @@map("sessions")
}

model Post {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  category        String
  tags            String[]    @default([])
  author          User?       @relation(fields: [userId], references: [id])
  title           String
  content         String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime?    
  previewImageUrl String?     
  published       Boolean     @default(true)
  userId          String      @db.ObjectId
  likes           Like[]
  comments        Comment[]
  @@map("posts")
}
model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@map("likes")
  @@unique([userId, postId]) // Ensure that a user can like a post only once
}
model Comment {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String     @db.ObjectId
  postId    String     @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime?  

  user      User       @relation(fields: [userId], references: [id])
  post      Post       @relation(fields: [postId], references: [id])
  parentCommentId String? @db.ObjectId // For nested comments (optional)

  @@map("comments")
}
model VerificationToken {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  identifier      String
  token           String      @unique
  expires         DateTime    @map("expiresAt")
  @@unique([identifier, token])
  @@map("verification_tokens")
}
model AiChatRoom {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String   @db.ObjectId// 참여자의 ID 목록
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) // 마지막으로 업데이트된 시간
  mode       String

  user      User     @relation(fields: [userId], references: [id])
  messages  AiChatMessage[] // 해당 대화방의 메시지 목록

  @@map("aichatrooms")
}
model AiChatMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  role      String
  roomId    String   @db.ObjectId // 메시지가 속한 대화방의 ID
  createdAt DateTime @default(now())

  room      AiChatRoom     @relation(fields: [roomId], references: [id]) // 속한 대화방

  @@map("aichatmessages")
}
model Categories {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  category        String      @unique    
  createdAt       DateTime    @default(now())
  @@map("categories")
}
model Changepassword {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  userId          String      @db.ObjectId 
  createdAt       DateTime    @default(now())

  @@map("changepassword")
}
model Tags {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  tag             String      @unique    
  createdAt       DateTime    @default(now())
  @@map("tags")
}

enum Role {
  USER
  ADMIN
}